//
//  MessagesViewController.swift
//  MessagingApp MessagesExtension
//
//  Created by Phillip OReggio on 12/16/18.
//  Copyright Â© 2018 phillip. All rights reserved.
//

import UIKit
import Messages
import SnapKit

@objc (MessagesViewController)

class MessagesViewController: MSMessagesAppViewController {
    
    var mainSession: MSSession?
    var needsUpdateOnTransition = true
    
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        presentViewController(controller: makeHomeViewController(with: conversation, presentationStyle: presentationStyle))
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
        
    }
    
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
        
        // Use this to clean up state related to the deleted message.
        mainSession = nil
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        // Use this method to prepare for the change in presentation style.
        if needsUpdateOnTransition {
            presentViewController(controller: makeHomeViewController(with: activeConversation, presentationStyle: presentationStyle))
        }
        needsUpdateOnTransition = true
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    override func didSelect(_ message: MSMessage, conversation: MSConversation) {
        if let controller = makeSessionViewController(with: message, conversation: conversation) {
            presentViewController(controller: controller)
            needsUpdateOnTransition = false
            requestStyle(style: .expanded)
        }
    }
    
    //MARK: - Creating and Removing View Controllers
    private func removeAllChildViewControllers() {
        for child in children {
            child.willMove(toParent: nil)
            child.view.removeFromSuperview()
            child.removeFromParent()
        }
    }
    
    func presentViewController(controller: UIViewController) {
        removeAllChildViewControllers()
        controller.view.frame = view.bounds
        addChild(controller)
        view.addSubview(controller.view)
        controller.view.snp.makeConstraints { (make) in
            make.edges.equalTo(view)
        }
        controller.didMove(toParent: self)
    }
    
    func makeHomeViewController(with conversation: MSConversation?, presentationStyle: MSMessagesAppPresentationStyle) -> UIViewController {
        var controller: UIViewController!
        if presentationStyle == .compact {
            controller = CompactViewController(with: conversation)
            (controller as! CompactViewController).presentationDelegate = self
        } else if presentationStyle == .expanded {
            controller = FullViewController(with: conversation)
            (controller as! FullViewController).presentationDelegate = self
            (controller as! FullViewController).sessionDelegate = self
        }
        return controller
    }
    
    func makeSessionViewController(with message: MSMessage, conversation: MSConversation) -> UIViewController? {
        // Get a Streak
        var streak: Streak!
        var controller: UIViewController?
        if let messageStreak = streakFromMessage(message: message) {
            streak = messageStreak
            if streak.gameEnd { // Game has ended on the streak
                controller = EndSessionViewController(streak: streak)
            } else {
                streak.count += 1
                controller = SessionViewController(with: conversation, streak: streak)
            }
        }
        if let sessionController = controller as? SessionViewController {
            sessionController.sessionDelegate = self
            sessionController.presentationStyleDelegate = self
        }
        return controller
    }
    
    func createViewController(with conversation: MSConversation?, presentationStyle: MSMessagesAppPresentationStyle, canGoToSession: Bool) {
        removeAllChildViewControllers()
        var controller: UIViewController!
        if presentationStyle == .compact {
            controller = CompactViewController(with: conversation)
            (controller as! CompactViewController).presentationDelegate = self
        } else if presentationStyle == .expanded {
            if let selectedMessage = conversation?.selectedMessage, canGoToSession {
                if let messageStreak = streakFromMessage(message: selectedMessage) { // Message has a streak
                    print("Message has a streak")
                    if messageStreak.gameEnd == false { // Streak hasn't ended, open Session View
                        print("Streak hasnt ended")
                        mainSession = selectedMessage.session
                        controller = SessionViewController(with: conversation, streak: messageStreak)
                        if let sessionView = controller as? SessionViewController {
                            sessionView.sessionDelegate = self
                            sessionView.presentationStyleDelegate = self
                        }
                    } else { // Streak ended, show the end streak view
                        print("Streak ended")
                        controller = EndSessionViewController(streak: messageStreak)
                    }
                } else { // Can't create a streak from message URL
                    print("Cant create from url")
                    controller = FullViewController(with: conversation)
                    if let fullView = controller as? FullViewController {
                        fullView.presentationDelegate = self
                        fullView.sessionDelegate = self
                    }
                }
            } else { // Default; Open the menu for all view controllers
                print("Default; Open the menu for all view controllers (convo.selectMess: \(conversation?.selectedMessage), canGoToSession; \(canGoToSession)")
                controller = FullViewController(with: conversation)
                if let fullView = controller as? FullViewController {
                    fullView.presentationDelegate = self
                    fullView.sessionDelegate = self
                }
            }
        }
        
        presentViewController(controller: controller)
    }
    
    // MARK: Convenience Methods
    private func streakFromMessage(message: MSMessage?) -> Streak? {
        var streak: Streak?
        
        if let url = message?.url {
            if let count = Int(url.valueOf("count") ?? ""), let gameEnd = Bool(url.valueOf("win") ?? "") {
                streak = Streak(count: count, gameDidEnd: gameEnd)
            } else {
                print("Couldnt get a complete streak so returning nil:")
                print("count : \(String(describing: url.valueOf("count")))")
                print("urlComp[1] : \(String(describing: url.valueOf("win")))")
            }
            
        }
        return streak
    }
}

// MARK: - Protocols
@objc protocol PresentationStyleDelegate {
    func requestStyle(style: MSMessagesAppPresentationStyle)
}

@objc protocol SessionDelegate {
    func getMainSession() -> MSSession
}

// MARK: - Extension
@objc extension MessagesViewController: PresentationStyleDelegate {
    func requestStyle(style: MSMessagesAppPresentationStyle) {
        requestPresentationStyle(style)
    }
}

@objc extension MessagesViewController: SessionDelegate {
    func getMainSession() -> MSSession {
        if mainSession == nil {
            mainSession = MSSession()
        }
        return mainSession!
    }
}

extension URL {
    func valueOf(_ queryParamaterName: String) -> String? {
        guard let url = URLComponents(string: self.absoluteString) else { return nil }
        return url.queryItems?.first(where: { $0.name == queryParamaterName })?.value
    }
}


